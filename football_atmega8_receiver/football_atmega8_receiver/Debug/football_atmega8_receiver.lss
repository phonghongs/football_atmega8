
football_atmega8_receiver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b20  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000b20  00000bb4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  0080006a  0080006a  00000bbe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bbe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000bf0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  00000c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001895  00000000  00000000  00000dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000090c  00000000  00000000  00002651  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c94  00000000  00000000  00002f5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003f8  00000000  00000000  00003bf4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000606  00000000  00000000  00003fec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b99  00000000  00000000  000045f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  0000518b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e0 e2       	ldi	r30, 0x20	; 32
  3a:	fb e0       	ldi	r31, 0x0B	; 11
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	aa 36       	cpi	r26, 0x6A	; 106
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	aa e6       	ldi	r26, 0x6A	; 106
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a2 37       	cpi	r26, 0x72	; 114
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	24 d2       	rcall	.+1096   	; 0x4a2 <main>
  5a:	60 c5       	rjmp	.+2752   	; 0xb1c <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <binary_print>:
	  

    }
}
/* ------------------------------------------------------------------------- */
void binary_print (uint8_t x) {
  5e:	0f 93       	push	r16
  60:	1f 93       	push	r17
  62:	cf 93       	push	r28
  64:	df 93       	push	r29
  66:	1f 92       	push	r1
  68:	cd b7       	in	r28, 0x3d	; 61
  6a:	de b7       	in	r29, 0x3e	; 62
  6c:	89 83       	std	Y+1, r24	; 0x01
	for (int i=7; i>=0 ; i--) {
  6e:	07 e0       	ldi	r16, 0x07	; 7
  70:	10 e0       	ldi	r17, 0x00	; 0
		if(bit_is_set(x,i)) {
  72:	89 81       	ldd	r24, Y+1	; 0x01
  74:	90 e0       	ldi	r25, 0x00	; 0
  76:	00 2e       	mov	r0, r16
  78:	02 c0       	rjmp	.+4      	; 0x7e <binary_print+0x20>
  7a:	95 95       	asr	r25
  7c:	87 95       	ror	r24
  7e:	0a 94       	dec	r0
  80:	e2 f7       	brpl	.-8      	; 0x7a <binary_print+0x1c>
  82:	80 ff       	sbrs	r24, 0
  84:	03 c0       	rjmp	.+6      	; 0x8c <binary_print+0x2e>
			USART_TxChar('1');
  86:	81 e3       	ldi	r24, 0x31	; 49
  88:	93 d3       	rcall	.+1830   	; 0x7b0 <USART_TxChar>
  8a:	02 c0       	rjmp	.+4      	; 0x90 <binary_print+0x32>
		}
		else USART_TxChar('0');
  8c:	80 e3       	ldi	r24, 0x30	; 48
  8e:	90 d3       	rcall	.+1824   	; 0x7b0 <USART_TxChar>

    }
}
/* ------------------------------------------------------------------------- */
void binary_print (uint8_t x) {
	for (int i=7; i>=0 ; i--) {
  90:	01 50       	subi	r16, 0x01	; 1
  92:	11 09       	sbc	r17, r1
  94:	70 f7       	brcc	.-36     	; 0x72 <binary_print+0x14>
		if(bit_is_set(x,i)) {
			USART_TxChar('1');
		}
		else USART_TxChar('0');
	}
	USART_TxChar('\n');
  96:	8a e0       	ldi	r24, 0x0A	; 10
  98:	8b d3       	rcall	.+1814   	; 0x7b0 <USART_TxChar>
}
  9a:	0f 90       	pop	r0
  9c:	df 91       	pop	r29
  9e:	cf 91       	pop	r28
  a0:	1f 91       	pop	r17
  a2:	0f 91       	pop	r16
  a4:	08 95       	ret

000000a6 <Timer1_Init>:

void Timer1_Init(void) {
	DDRB |= (1 << 3);
  a6:	bb 9a       	sbi	0x17, 3	; 23
	DDR_MOTOR_L |= (1<<MOTOR_L);
  a8:	ba 9a       	sbi	0x17, 2	; 23
	DDRB |= (1 << 1);
  aa:	b9 9a       	sbi	0x17, 1	; 23
	
	sbi(DDR_DIR0, DIR00);
  ac:	a0 9a       	sbi	0x14, 0	; 20
	sbi(PORT_DIR0,DIR00);
  ae:	a8 9a       	sbi	0x15, 0	; 21
	
	sbi(DDR_DIR0, DIR01);
  b0:	a1 9a       	sbi	0x14, 1	; 20
	cbi(PORT_DIR0,DIR01);
  b2:	a9 98       	cbi	0x15, 1	; 21
	
	sbi(DDR_DIR1, DIR10);
  b4:	a2 9a       	sbi	0x14, 2	; 20
	sbi(PORT_DIR1, DIR10);
  b6:	aa 9a       	sbi	0x15, 2	; 21
	
	sbi(DDR_DIR1, DIR11);
  b8:	a4 9a       	sbi	0x14, 4	; 20
	cbi(PORT_DIR1, DIR11);
  ba:	ac 98       	cbi	0x15, 4	; 21
	
	TCCR1A =(1 << COM1A1)|(1<<COM1B1);
  bc:	80 ea       	ldi	r24, 0xA0	; 160
  be:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= (1<<WGM11);
  c0:	8f b5       	in	r24, 0x2f	; 47
  c2:	82 60       	ori	r24, 0x02	; 2
  c4:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1<<WGM12) | (1<<WGM13) | (1<<CS11);
  c6:	8a e1       	ldi	r24, 0x1A	; 26
  c8:	8e bd       	out	0x2e, r24	; 46
	//TCCR2 = (1 << WGM21) | (1 << WGM20) |(1 << COM21) | (1 << CS21);
	ICR1=500;
  ca:	84 ef       	ldi	r24, 0xF4	; 244
  cc:	91 e0       	ldi	r25, 0x01	; 1
  ce:	97 bd       	out	0x27, r25	; 39
  d0:	86 bd       	out	0x26, r24	; 38
  d2:	08 95       	ret

000000d4 <speed2>:
}

void speed2(float left, float right){
  d4:	4f 92       	push	r4
  d6:	5f 92       	push	r5
  d8:	6f 92       	push	r6
  da:	7f 92       	push	r7
  dc:	8f 92       	push	r8
  de:	9f 92       	push	r9
  e0:	af 92       	push	r10
  e2:	bf 92       	push	r11
  e4:	cf 92       	push	r12
  e6:	df 92       	push	r13
  e8:	ef 92       	push	r14
  ea:	ff 92       	push	r15
  ec:	2b 01       	movw	r4, r22
  ee:	3c 01       	movw	r6, r24
  f0:	49 01       	movw	r8, r18
  f2:	5a 01       	movw	r10, r20
	//==========================left==============
	if (left < 0) { //-------------------di lui---------
  f4:	20 e0       	ldi	r18, 0x00	; 0
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	a9 01       	movw	r20, r18
  fa:	5e d3       	rcall	.+1724   	; 0x7b8 <__cmpsf2>
  fc:	88 23       	and	r24, r24
  fe:	1c f4       	brge	.+6      	; 0x106 <speed2+0x32>
		sbi(PORT_DIR1,DIR00);
 100:	a8 9a       	sbi	0x15, 0	; 21
		cbi(PORT_DIR1,DIR01);
 102:	a9 98       	cbi	0x15, 1	; 21
 104:	02 c0       	rjmp	.+4      	; 0x10a <speed2+0x36>
	} else{         //----------------tien---------------
		cbi(PORT_DIR1,DIR00);
 106:	a8 98       	cbi	0x15, 0	; 21
		sbi(PORT_DIR1,DIR01);
 108:	a9 9a       	sbi	0x15, 1	; 21
	}
	//===================right====================
	if (right < 0) { //-------------------di lui---------
 10a:	20 e0       	ldi	r18, 0x00	; 0
 10c:	30 e0       	ldi	r19, 0x00	; 0
 10e:	a9 01       	movw	r20, r18
 110:	c5 01       	movw	r24, r10
 112:	b4 01       	movw	r22, r8
 114:	51 d3       	rcall	.+1698   	; 0x7b8 <__cmpsf2>
 116:	88 23       	and	r24, r24
 118:	1c f4       	brge	.+6      	; 0x120 <speed2+0x4c>
		sbi(PORT_DIR0,DIR10);
 11a:	aa 9a       	sbi	0x15, 2	; 21
		cbi(PORT_DIR0,DIR11);
 11c:	ac 98       	cbi	0x15, 4	; 21
 11e:	02 c0       	rjmp	.+4      	; 0x124 <speed2+0x50>
		} else{         //----------------tien---------------
		cbi(PORT_DIR0,DIR10);
 120:	aa 98       	cbi	0x15, 2	; 21
		sbi(PORT_DIR0,DIR11);
 122:	ac 9a       	sbi	0x15, 4	; 21
	}
	int speed_right = (long)((abs(right)*percent*1.02)/100.0);
 124:	c0 90 6a 00 	lds	r12, 0x006A	; 0x80006a <__data_end>
 128:	d0 90 6b 00 	lds	r13, 0x006B	; 0x80006b <__data_end+0x1>
 12c:	e0 90 6c 00 	lds	r14, 0x006C	; 0x80006c <__data_end+0x2>
 130:	f0 90 6d 00 	lds	r15, 0x006D	; 0x80006d <__data_end+0x3>
 134:	c5 01       	movw	r24, r10
 136:	b4 01       	movw	r22, r8
 138:	ab d3       	rcall	.+1878   	; 0x890 <__fixsfsi>
 13a:	9b 01       	movw	r18, r22
 13c:	77 23       	and	r23, r23
 13e:	24 f4       	brge	.+8      	; 0x148 <speed2+0x74>
 140:	22 27       	eor	r18, r18
 142:	33 27       	eor	r19, r19
 144:	26 1b       	sub	r18, r22
 146:	37 0b       	sbc	r19, r23
 148:	b9 01       	movw	r22, r18
 14a:	33 0f       	add	r19, r19
 14c:	88 0b       	sbc	r24, r24
 14e:	99 0b       	sbc	r25, r25
 150:	d2 d3       	rcall	.+1956   	; 0x8f6 <__floatsisf>
 152:	a7 01       	movw	r20, r14
 154:	96 01       	movw	r18, r12
 156:	7f d4       	rcall	.+2302   	; 0xa56 <__mulsf3>
 158:	2c e5       	ldi	r18, 0x5C	; 92
 15a:	3f e8       	ldi	r19, 0x8F	; 143
 15c:	42 e8       	ldi	r20, 0x82	; 130
 15e:	5f e3       	ldi	r21, 0x3F	; 63
 160:	7a d4       	rcall	.+2292   	; 0xa56 <__mulsf3>
 162:	20 e0       	ldi	r18, 0x00	; 0
 164:	30 e0       	ldi	r19, 0x00	; 0
 166:	48 ec       	ldi	r20, 0xC8	; 200
 168:	52 e4       	ldi	r21, 0x42	; 66
 16a:	2a d3       	rcall	.+1620   	; 0x7c0 <__divsf3>
 16c:	91 d3       	rcall	.+1826   	; 0x890 <__fixsfsi>
 16e:	4b 01       	movw	r8, r22
 170:	5c 01       	movw	r10, r24
	int speed_left = (long)((abs(left)*percent)/100.0);
 172:	c3 01       	movw	r24, r6
 174:	b2 01       	movw	r22, r4
 176:	8c d3       	rcall	.+1816   	; 0x890 <__fixsfsi>
 178:	9b 01       	movw	r18, r22
 17a:	77 23       	and	r23, r23
 17c:	24 f4       	brge	.+8      	; 0x186 <speed2+0xb2>
 17e:	22 27       	eor	r18, r18
 180:	33 27       	eor	r19, r19
 182:	26 1b       	sub	r18, r22
 184:	37 0b       	sbc	r19, r23
 186:	b9 01       	movw	r22, r18
 188:	33 0f       	add	r19, r19
 18a:	88 0b       	sbc	r24, r24
 18c:	99 0b       	sbc	r25, r25
 18e:	b3 d3       	rcall	.+1894   	; 0x8f6 <__floatsisf>
 190:	a7 01       	movw	r20, r14
 192:	96 01       	movw	r18, r12
 194:	60 d4       	rcall	.+2240   	; 0xa56 <__mulsf3>
 196:	20 e0       	ldi	r18, 0x00	; 0
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	48 ec       	ldi	r20, 0xC8	; 200
 19c:	52 e4       	ldi	r21, 0x42	; 66
 19e:	10 d3       	rcall	.+1568   	; 0x7c0 <__divsf3>
 1a0:	77 d3       	rcall	.+1774   	; 0x890 <__fixsfsi>
 1a2:	9b 01       	movw	r18, r22
	if (speed_right > 500) OCR1A = 500;
 1a4:	45 ef       	ldi	r20, 0xF5	; 245
 1a6:	84 16       	cp	r8, r20
 1a8:	41 e0       	ldi	r20, 0x01	; 1
 1aa:	94 06       	cpc	r9, r20
 1ac:	2c f0       	brlt	.+10     	; 0x1b8 <speed2+0xe4>
 1ae:	44 ef       	ldi	r20, 0xF4	; 244
 1b0:	51 e0       	ldi	r21, 0x01	; 1
 1b2:	5b bd       	out	0x2b, r21	; 43
 1b4:	4a bd       	out	0x2a, r20	; 42
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <speed2+0xe8>
	else OCR1A = speed_right;
 1b8:	9b bc       	out	0x2b, r9	; 43
 1ba:	8a bc       	out	0x2a, r8	; 42
	if (speed_left > 500) OCR1B = 500;
 1bc:	25 3f       	cpi	r18, 0xF5	; 245
 1be:	31 40       	sbci	r19, 0x01	; 1
 1c0:	2c f0       	brlt	.+10     	; 0x1cc <speed2+0xf8>
 1c2:	84 ef       	ldi	r24, 0xF4	; 244
 1c4:	91 e0       	ldi	r25, 0x01	; 1
 1c6:	99 bd       	out	0x29, r25	; 41
 1c8:	88 bd       	out	0x28, r24	; 40
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <speed2+0xfc>
	else OCR1B = speed_left;
 1cc:	79 bd       	out	0x29, r23	; 41
 1ce:	68 bd       	out	0x28, r22	; 40
	return;
}
 1d0:	ff 90       	pop	r15
 1d2:	ef 90       	pop	r14
 1d4:	df 90       	pop	r13
 1d6:	cf 90       	pop	r12
 1d8:	bf 90       	pop	r11
 1da:	af 90       	pop	r10
 1dc:	9f 90       	pop	r9
 1de:	8f 90       	pop	r8
 1e0:	7f 90       	pop	r7
 1e2:	6f 90       	pop	r6
 1e4:	5f 90       	pop	r5
 1e6:	4f 90       	pop	r4
 1e8:	08 95       	ret

000001ea <prepare>:
				+	1000: 8
				+	1001: 9
				+	1010: 10
	----------------------------------*/
	
	if (bit_is_set(data_array[0],3) && bit_is_set(data_array[0], 1)) {percent = 100.0; binary_print(10);}
 1ea:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <data_array>
 1ee:	83 ff       	sbrs	r24, 3
 1f0:	13 c0       	rjmp	.+38     	; 0x218 <prepare+0x2e>
 1f2:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <data_array>
 1f6:	81 ff       	sbrs	r24, 1
 1f8:	0f c0       	rjmp	.+30     	; 0x218 <prepare+0x2e>
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	a8 ec       	ldi	r26, 0xC8	; 200
 200:	b2 e4       	ldi	r27, 0x42	; 66
 202:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
 206:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <__data_end+0x1>
 20a:	a0 93 6c 00 	sts	0x006C, r26	; 0x80006c <__data_end+0x2>
 20e:	b0 93 6d 00 	sts	0x006D, r27	; 0x80006d <__data_end+0x3>
 212:	8a e0       	ldi	r24, 0x0A	; 10
 214:	24 df       	rcall	.-440    	; 0x5e <binary_print>
 216:	c2 c0       	rjmp	.+388    	; 0x39c <prepare+0x1b2>
	else
		if (bit_is_set(data_array[0], 3) && bit_is_set(data_array[0], 0)) {percent = 90.0; binary_print(9);}
 218:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <data_array>
 21c:	83 ff       	sbrs	r24, 3
 21e:	13 c0       	rjmp	.+38     	; 0x246 <prepare+0x5c>
 220:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <data_array>
 224:	80 ff       	sbrs	r24, 0
 226:	0f c0       	rjmp	.+30     	; 0x246 <prepare+0x5c>
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	a4 eb       	ldi	r26, 0xB4	; 180
 22e:	b2 e4       	ldi	r27, 0x42	; 66
 230:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
 234:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <__data_end+0x1>
 238:	a0 93 6c 00 	sts	0x006C, r26	; 0x80006c <__data_end+0x2>
 23c:	b0 93 6d 00 	sts	0x006D, r27	; 0x80006d <__data_end+0x3>
 240:	89 e0       	ldi	r24, 0x09	; 9
 242:	0d df       	rcall	.-486    	; 0x5e <binary_print>
 244:	ab c0       	rjmp	.+342    	; 0x39c <prepare+0x1b2>
	else
		if (bit_is_set(data_array[0], 3))  {percent = 80.0; binary_print(8);}
 246:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <data_array>
 24a:	83 ff       	sbrs	r24, 3
 24c:	0f c0       	rjmp	.+30     	; 0x26c <prepare+0x82>
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	a0 ea       	ldi	r26, 0xA0	; 160
 254:	b2 e4       	ldi	r27, 0x42	; 66
 256:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
 25a:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <__data_end+0x1>
 25e:	a0 93 6c 00 	sts	0x006C, r26	; 0x80006c <__data_end+0x2>
 262:	b0 93 6d 00 	sts	0x006D, r27	; 0x80006d <__data_end+0x3>
 266:	88 e0       	ldi	r24, 0x08	; 8
 268:	fa de       	rcall	.-524    	; 0x5e <binary_print>
 26a:	98 c0       	rjmp	.+304    	; 0x39c <prepare+0x1b2>
	else
		if (bit_is_set(data_array[0], 2) && bit_is_set(data_array[0], 1) && bit_is_set(data_array[0], 0))  {percent = 70.0; binary_print(7);}
 26c:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <data_array>
 270:	82 ff       	sbrs	r24, 2
 272:	17 c0       	rjmp	.+46     	; 0x2a2 <prepare+0xb8>
 274:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <data_array>
 278:	81 ff       	sbrs	r24, 1
 27a:	13 c0       	rjmp	.+38     	; 0x2a2 <prepare+0xb8>
 27c:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <data_array>
 280:	80 ff       	sbrs	r24, 0
 282:	0f c0       	rjmp	.+30     	; 0x2a2 <prepare+0xb8>
 284:	80 e0       	ldi	r24, 0x00	; 0
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	ac e8       	ldi	r26, 0x8C	; 140
 28a:	b2 e4       	ldi	r27, 0x42	; 66
 28c:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
 290:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <__data_end+0x1>
 294:	a0 93 6c 00 	sts	0x006C, r26	; 0x80006c <__data_end+0x2>
 298:	b0 93 6d 00 	sts	0x006D, r27	; 0x80006d <__data_end+0x3>
 29c:	87 e0       	ldi	r24, 0x07	; 7
 29e:	df de       	rcall	.-578    	; 0x5e <binary_print>
 2a0:	7d c0       	rjmp	.+250    	; 0x39c <prepare+0x1b2>
	else
		if (bit_is_set(data_array[0], 2) && bit_is_set(data_array[0], 1))  {percent = 60.0; binary_print(6);}
 2a2:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <data_array>
 2a6:	82 ff       	sbrs	r24, 2
 2a8:	13 c0       	rjmp	.+38     	; 0x2d0 <prepare+0xe6>
 2aa:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <data_array>
 2ae:	81 ff       	sbrs	r24, 1
 2b0:	0f c0       	rjmp	.+30     	; 0x2d0 <prepare+0xe6>
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	a0 e7       	ldi	r26, 0x70	; 112
 2b8:	b2 e4       	ldi	r27, 0x42	; 66
 2ba:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
 2be:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <__data_end+0x1>
 2c2:	a0 93 6c 00 	sts	0x006C, r26	; 0x80006c <__data_end+0x2>
 2c6:	b0 93 6d 00 	sts	0x006D, r27	; 0x80006d <__data_end+0x3>
 2ca:	86 e0       	ldi	r24, 0x06	; 6
 2cc:	c8 de       	rcall	.-624    	; 0x5e <binary_print>
 2ce:	66 c0       	rjmp	.+204    	; 0x39c <prepare+0x1b2>
	else
		if (bit_is_set(data_array[0],2) && bit_is_set(data_array[0], 0))  {percent = 50.0; binary_print(5);}
 2d0:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <data_array>
 2d4:	82 ff       	sbrs	r24, 2
 2d6:	13 c0       	rjmp	.+38     	; 0x2fe <prepare+0x114>
 2d8:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <data_array>
 2dc:	80 ff       	sbrs	r24, 0
 2de:	0f c0       	rjmp	.+30     	; 0x2fe <prepare+0x114>
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	a8 e4       	ldi	r26, 0x48	; 72
 2e6:	b2 e4       	ldi	r27, 0x42	; 66
 2e8:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
 2ec:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <__data_end+0x1>
 2f0:	a0 93 6c 00 	sts	0x006C, r26	; 0x80006c <__data_end+0x2>
 2f4:	b0 93 6d 00 	sts	0x006D, r27	; 0x80006d <__data_end+0x3>
 2f8:	85 e0       	ldi	r24, 0x05	; 5
 2fa:	b1 de       	rcall	.-670    	; 0x5e <binary_print>
 2fc:	4f c0       	rjmp	.+158    	; 0x39c <prepare+0x1b2>
	else
		if (bit_is_set(data_array[0],2)) {percent = 40.0; binary_print(4);}
 2fe:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <data_array>
 302:	82 ff       	sbrs	r24, 2
 304:	0f c0       	rjmp	.+30     	; 0x324 <prepare+0x13a>
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	a0 e2       	ldi	r26, 0x20	; 32
 30c:	b2 e4       	ldi	r27, 0x42	; 66
 30e:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
 312:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <__data_end+0x1>
 316:	a0 93 6c 00 	sts	0x006C, r26	; 0x80006c <__data_end+0x2>
 31a:	b0 93 6d 00 	sts	0x006D, r27	; 0x80006d <__data_end+0x3>
 31e:	84 e0       	ldi	r24, 0x04	; 4
 320:	9e de       	rcall	.-708    	; 0x5e <binary_print>
 322:	3c c0       	rjmp	.+120    	; 0x39c <prepare+0x1b2>
	else
		if (bit_is_set(data_array[0],1) && bit_is_set(data_array[0], 0))  {percent = 30.0; binary_print(3);}
 324:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <data_array>
 328:	81 ff       	sbrs	r24, 1
 32a:	13 c0       	rjmp	.+38     	; 0x352 <prepare+0x168>
 32c:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <data_array>
 330:	80 ff       	sbrs	r24, 0
 332:	0f c0       	rjmp	.+30     	; 0x352 <prepare+0x168>
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	a0 ef       	ldi	r26, 0xF0	; 240
 33a:	b1 e4       	ldi	r27, 0x41	; 65
 33c:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
 340:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <__data_end+0x1>
 344:	a0 93 6c 00 	sts	0x006C, r26	; 0x80006c <__data_end+0x2>
 348:	b0 93 6d 00 	sts	0x006D, r27	; 0x80006d <__data_end+0x3>
 34c:	83 e0       	ldi	r24, 0x03	; 3
 34e:	87 de       	rcall	.-754    	; 0x5e <binary_print>
 350:	25 c0       	rjmp	.+74     	; 0x39c <prepare+0x1b2>
	else
		if (bit_is_set(data_array[0],1))  {percent = 20.0; binary_print(2);}
 352:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <data_array>
 356:	81 ff       	sbrs	r24, 1
 358:	0f c0       	rjmp	.+30     	; 0x378 <prepare+0x18e>
 35a:	80 e0       	ldi	r24, 0x00	; 0
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	a0 ea       	ldi	r26, 0xA0	; 160
 360:	b1 e4       	ldi	r27, 0x41	; 65
 362:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
 366:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <__data_end+0x1>
 36a:	a0 93 6c 00 	sts	0x006C, r26	; 0x80006c <__data_end+0x2>
 36e:	b0 93 6d 00 	sts	0x006D, r27	; 0x80006d <__data_end+0x3>
 372:	82 e0       	ldi	r24, 0x02	; 2
 374:	74 de       	rcall	.-792    	; 0x5e <binary_print>
 376:	12 c0       	rjmp	.+36     	; 0x39c <prepare+0x1b2>
	else
		if (bit_is_set(data_array[0], 0))  {percent = 10.0; binary_print(1);}
 378:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <data_array>
 37c:	80 ff       	sbrs	r24, 0
 37e:	0e c0       	rjmp	.+28     	; 0x39c <prepare+0x1b2>
 380:	80 e0       	ldi	r24, 0x00	; 0
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	a0 e2       	ldi	r26, 0x20	; 32
 386:	b1 e4       	ldi	r27, 0x41	; 65
 388:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
 38c:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <__data_end+0x1>
 390:	a0 93 6c 00 	sts	0x006C, r26	; 0x80006c <__data_end+0x2>
 394:	b0 93 6d 00 	sts	0x006D, r27	; 0x80006d <__data_end+0x3>
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	61 de       	rcall	.-830    	; 0x5e <binary_print>
						
					
	//-------------------------		Angle prepare	---------------
	if (bit_is_set(data_array[0], 7) && bit_is_set(data_array[0], 5)) speed2(500.0,300.0);// tien phai'
 39c:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <data_array>
 3a0:	88 23       	and	r24, r24
 3a2:	74 f4       	brge	.+28     	; 0x3c0 <prepare+0x1d6>
 3a4:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <data_array>
 3a8:	85 ff       	sbrs	r24, 5
 3aa:	0a c0       	rjmp	.+20     	; 0x3c0 <prepare+0x1d6>
 3ac:	20 e0       	ldi	r18, 0x00	; 0
 3ae:	30 e0       	ldi	r19, 0x00	; 0
 3b0:	46 e9       	ldi	r20, 0x96	; 150
 3b2:	53 e4       	ldi	r21, 0x43	; 67
 3b4:	60 e0       	ldi	r22, 0x00	; 0
 3b6:	70 e0       	ldi	r23, 0x00	; 0
 3b8:	8a ef       	ldi	r24, 0xFA	; 250
 3ba:	93 e4       	ldi	r25, 0x43	; 67
 3bc:	8b de       	rcall	.-746    	; 0xd4 <speed2>
 3be:	08 95       	ret
	else
		if (bit_is_set(data_array[0], 7) && bit_is_set(data_array[0], 4)) speed2(250.0,500.0);// tien trai'
 3c0:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <data_array>
 3c4:	88 23       	and	r24, r24
 3c6:	74 f4       	brge	.+28     	; 0x3e4 <prepare+0x1fa>
 3c8:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <data_array>
 3cc:	84 ff       	sbrs	r24, 4
 3ce:	0a c0       	rjmp	.+20     	; 0x3e4 <prepare+0x1fa>
 3d0:	20 e0       	ldi	r18, 0x00	; 0
 3d2:	30 e0       	ldi	r19, 0x00	; 0
 3d4:	4a ef       	ldi	r20, 0xFA	; 250
 3d6:	53 e4       	ldi	r21, 0x43	; 67
 3d8:	60 e0       	ldi	r22, 0x00	; 0
 3da:	70 e0       	ldi	r23, 0x00	; 0
 3dc:	8a e7       	ldi	r24, 0x7A	; 122
 3de:	93 e4       	ldi	r25, 0x43	; 67
 3e0:	79 de       	rcall	.-782    	; 0xd4 <speed2>
 3e2:	08 95       	ret
	else
		if (bit_is_set(data_array[0], 6) && bit_is_set(data_array[0], 5)) speed2(-500.0,-350.0);// lui phai'
 3e4:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <data_array>
 3e8:	86 ff       	sbrs	r24, 6
 3ea:	0e c0       	rjmp	.+28     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3ec:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <data_array>
 3f0:	85 ff       	sbrs	r24, 5
 3f2:	0a c0       	rjmp	.+20     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3f4:	20 e0       	ldi	r18, 0x00	; 0
 3f6:	30 e0       	ldi	r19, 0x00	; 0
 3f8:	4f ea       	ldi	r20, 0xAF	; 175
 3fa:	53 ec       	ldi	r21, 0xC3	; 195
 3fc:	60 e0       	ldi	r22, 0x00	; 0
 3fe:	70 e0       	ldi	r23, 0x00	; 0
 400:	8a ef       	ldi	r24, 0xFA	; 250
 402:	93 ec       	ldi	r25, 0xC3	; 195
 404:	67 de       	rcall	.-818    	; 0xd4 <speed2>
 406:	08 95       	ret
	else
		if (bit_is_set(data_array[0], 6) && bit_is_set(data_array[0], 4)) speed2(-350.0,-500.0);// lui trai'
 408:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <data_array>
 40c:	86 ff       	sbrs	r24, 6
 40e:	0e c0       	rjmp	.+28     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 410:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <data_array>
 414:	84 ff       	sbrs	r24, 4
 416:	0a c0       	rjmp	.+20     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 418:	20 e0       	ldi	r18, 0x00	; 0
 41a:	30 e0       	ldi	r19, 0x00	; 0
 41c:	4a ef       	ldi	r20, 0xFA	; 250
 41e:	53 ec       	ldi	r21, 0xC3	; 195
 420:	60 e0       	ldi	r22, 0x00	; 0
 422:	70 e0       	ldi	r23, 0x00	; 0
 424:	8f ea       	ldi	r24, 0xAF	; 175
 426:	93 ec       	ldi	r25, 0xC3	; 195
 428:	55 de       	rcall	.-854    	; 0xd4 <speed2>
 42a:	08 95       	ret
	else
		if (bit_is_set(data_array[0], 7)) speed2(500.0,500.0);// tien
 42c:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <data_array>
 430:	88 23       	and	r24, r24
 432:	44 f4       	brge	.+16     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 434:	20 e0       	ldi	r18, 0x00	; 0
 436:	30 e0       	ldi	r19, 0x00	; 0
 438:	4a ef       	ldi	r20, 0xFA	; 250
 43a:	53 e4       	ldi	r21, 0x43	; 67
 43c:	ca 01       	movw	r24, r20
 43e:	b9 01       	movw	r22, r18
 440:	49 de       	rcall	.-878    	; 0xd4 <speed2>
 442:	08 95       	ret
	else 
		if (bit_is_set(data_array[0], 6)) speed2(-500.0,-500.0);// lui
 444:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <data_array>
 448:	86 ff       	sbrs	r24, 6
 44a:	08 c0       	rjmp	.+16     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 44c:	20 e0       	ldi	r18, 0x00	; 0
 44e:	30 e0       	ldi	r19, 0x00	; 0
 450:	4a ef       	ldi	r20, 0xFA	; 250
 452:	53 ec       	ldi	r21, 0xC3	; 195
 454:	ca 01       	movw	r24, r20
 456:	b9 01       	movw	r22, r18
 458:	3d de       	rcall	.-902    	; 0xd4 <speed2>
 45a:	08 95       	ret
	else
		if (bit_is_set(data_array[0],5)) speed2(300.0,-300.0);//	phai
 45c:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <data_array>
 460:	85 ff       	sbrs	r24, 5
 462:	0a c0       	rjmp	.+20     	; 0x478 <__stack+0x19>
 464:	20 e0       	ldi	r18, 0x00	; 0
 466:	30 e0       	ldi	r19, 0x00	; 0
 468:	46 e9       	ldi	r20, 0x96	; 150
 46a:	53 ec       	ldi	r21, 0xC3	; 195
 46c:	60 e0       	ldi	r22, 0x00	; 0
 46e:	70 e0       	ldi	r23, 0x00	; 0
 470:	86 e9       	ldi	r24, 0x96	; 150
 472:	93 e4       	ldi	r25, 0x43	; 67
 474:	2f de       	rcall	.-930    	; 0xd4 <speed2>
 476:	08 95       	ret
	else
		if (bit_is_set(data_array[0],4)) speed2(-300.0,300.0);// trai
 478:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <data_array>
 47c:	84 ff       	sbrs	r24, 4
 47e:	0a c0       	rjmp	.+20     	; 0x494 <__stack+0x35>
 480:	20 e0       	ldi	r18, 0x00	; 0
 482:	30 e0       	ldi	r19, 0x00	; 0
 484:	46 e9       	ldi	r20, 0x96	; 150
 486:	53 e4       	ldi	r21, 0x43	; 67
 488:	60 e0       	ldi	r22, 0x00	; 0
 48a:	70 e0       	ldi	r23, 0x00	; 0
 48c:	86 e9       	ldi	r24, 0x96	; 150
 48e:	93 ec       	ldi	r25, 0xC3	; 195
 490:	21 de       	rcall	.-958    	; 0xd4 <speed2>
 492:	08 95       	ret
	else speed2(0.0,0.0);//stop
 494:	20 e0       	ldi	r18, 0x00	; 0
 496:	30 e0       	ldi	r19, 0x00	; 0
 498:	a9 01       	movw	r20, r18
 49a:	ca 01       	movw	r24, r20
 49c:	b9 01       	movw	r22, r18
 49e:	1a de       	rcall	.-972    	; 0xd4 <speed2>
 4a0:	08 95       	ret

000004a2 <main>:
/* ------------------------------------------------------------------------- */
int main()
{
	//wdt_enable( WDTO_2S);
	/* define UART */
	USART_Init(9600);
 4a2:	60 e8       	ldi	r22, 0x80	; 128
 4a4:	75 e2       	ldi	r23, 0x25	; 37
 4a6:	80 e0       	ldi	r24, 0x00	; 0
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	79 d1       	rcall	.+754    	; 0x79e <USART_Init>
	/*	define PinMode	*/
	Timer1_Init();
 4ac:	fc dd       	rcall	.-1032   	; 0xa6 <Timer1_Init>
	
    /* init hardware pins */
    nrf24_init();
 4ae:	17 d0       	rcall	.+46     	; 0x4de <nrf24_init>
	   
    /* Channel #2 , payload length: 4 */
    nrf24_config(2,2);
 4b0:	62 e0       	ldi	r22, 0x02	; 2
 4b2:	82 e0       	ldi	r24, 0x02	; 2
 4b4:	c0 d0       	rcall	.+384    	; 0x636 <nrf24_config>
 
    /* Set the device addresses */
    nrf24_tx_address(tx_address);
 4b6:	85 e6       	ldi	r24, 0x65	; 101
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	42 d1       	rcall	.+644    	; 0x740 <nrf24_tx_address>
    nrf24_rx_address(rx_address);
 4bc:	80 e6       	ldi	r24, 0x60	; 96
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	31 d1       	rcall	.+610    	; 0x724 <nrf24_rx_address>
	
    while(1)
    {    
	
      if(nrf24_dataReady())
 4c2:	0d d1       	rcall	.+538    	; 0x6de <nrf24_dataReady>
 4c4:	88 23       	and	r24, r24
 4c6:	e9 f3       	breq	.-6      	; 0x4c2 <main+0x20>
        {
			nrf24_getData(data_array);
 4c8:	8f e6       	ldi	r24, 0x6F	; 111
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	8f d0       	rcall	.+286    	; 0x5ec <nrf24_getData>
			binary_print(data_array[0]);
 4ce:	cf e6       	ldi	r28, 0x6F	; 111
 4d0:	d0 e0       	ldi	r29, 0x00	; 0
 4d2:	88 81       	ld	r24, Y
 4d4:	c4 dd       	rcall	.-1144   	; 0x5e <binary_print>
			prepare();
 4d6:	89 de       	rcall	.-750    	; 0x1ea <prepare>
			binary_print(data_array[0]);
 4d8:	88 81       	ld	r24, Y
 4da:	c1 dd       	rcall	.-1150   	; 0x5e <binary_print>
 4dc:	f2 cf       	rjmp	.-28     	; 0x4c2 <main+0x20>

000004de <nrf24_init>:
{
    uint8_t rv;
    nrf24_readRegister(OBSERVE_TX,&rv,1);
    rv = rv & 0x0F;
    return rv;
}
 4de:	3e d1       	rcall	.+636    	; 0x75c <nrf24_setupPins>
 4e0:	80 e0       	ldi	r24, 0x00	; 0
 4e2:	42 d1       	rcall	.+644    	; 0x768 <nrf24_ce_digitalWrite>
 4e4:	81 e0       	ldi	r24, 0x01	; 1
 4e6:	46 d1       	rcall	.+652    	; 0x774 <nrf24_csn_digitalWrite>
 4e8:	08 95       	ret

000004ea <spi_transfer>:
 4ea:	ef 92       	push	r14
 4ec:	ff 92       	push	r15
 4ee:	1f 93       	push	r17
 4f0:	cf 93       	push	r28
 4f2:	df 93       	push	r29
 4f4:	e8 2e       	mov	r14, r24
 4f6:	80 e0       	ldi	r24, 0x00	; 0
 4f8:	43 d1       	rcall	.+646    	; 0x780 <nrf24_sck_digitalWrite>
 4fa:	c7 e0       	ldi	r28, 0x07	; 7
 4fc:	d0 e0       	ldi	r29, 0x00	; 0
 4fe:	10 e0       	ldi	r17, 0x00	; 0
 500:	f1 2c       	mov	r15, r1
 502:	97 01       	movw	r18, r14
 504:	0c 2e       	mov	r0, r28
 506:	02 c0       	rjmp	.+4      	; 0x50c <spi_transfer+0x22>
 508:	35 95       	asr	r19
 50a:	27 95       	ror	r18
 50c:	0a 94       	dec	r0
 50e:	e2 f7       	brpl	.-8      	; 0x508 <spi_transfer+0x1e>
 510:	20 ff       	sbrs	r18, 0
 512:	03 c0       	rjmp	.+6      	; 0x51a <spi_transfer+0x30>
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	3a d1       	rcall	.+628    	; 0x78c <nrf24_mosi_digitalWrite>
 518:	02 c0       	rjmp	.+4      	; 0x51e <spi_transfer+0x34>
 51a:	80 e0       	ldi	r24, 0x00	; 0
 51c:	37 d1       	rcall	.+622    	; 0x78c <nrf24_mosi_digitalWrite>
 51e:	81 e0       	ldi	r24, 0x01	; 1
 520:	2f d1       	rcall	.+606    	; 0x780 <nrf24_sck_digitalWrite>
 522:	11 0f       	add	r17, r17
 524:	39 d1       	rcall	.+626    	; 0x798 <nrf24_miso_digitalRead>
 526:	81 11       	cpse	r24, r1
 528:	11 60       	ori	r17, 0x01	; 1
 52a:	80 e0       	ldi	r24, 0x00	; 0
 52c:	29 d1       	rcall	.+594    	; 0x780 <nrf24_sck_digitalWrite>
 52e:	21 97       	sbiw	r28, 0x01	; 1
 530:	40 f7       	brcc	.-48     	; 0x502 <spi_transfer+0x18>
 532:	81 2f       	mov	r24, r17
 534:	df 91       	pop	r29
 536:	cf 91       	pop	r28
 538:	1f 91       	pop	r17
 53a:	ff 90       	pop	r15
 53c:	ef 90       	pop	r14
 53e:	08 95       	ret

00000540 <nrf24_getStatus>:
 540:	cf 93       	push	r28
 542:	80 e0       	ldi	r24, 0x00	; 0
 544:	17 d1       	rcall	.+558    	; 0x774 <nrf24_csn_digitalWrite>
 546:	8f ef       	ldi	r24, 0xFF	; 255
 548:	d0 df       	rcall	.-96     	; 0x4ea <spi_transfer>
 54a:	c8 2f       	mov	r28, r24
 54c:	81 e0       	ldi	r24, 0x01	; 1
 54e:	12 d1       	rcall	.+548    	; 0x774 <nrf24_csn_digitalWrite>
 550:	8c 2f       	mov	r24, r28
 552:	cf 91       	pop	r28
 554:	08 95       	ret

00000556 <nrf24_transferSync>:
 556:	ef 92       	push	r14
 558:	ff 92       	push	r15
 55a:	0f 93       	push	r16
 55c:	1f 93       	push	r17
 55e:	cf 93       	push	r28
 560:	df 93       	push	r29
 562:	44 23       	and	r20, r20
 564:	99 f0       	breq	.+38     	; 0x58c <nrf24_transferSync+0x36>
 566:	ec 01       	movw	r28, r24
 568:	06 2f       	mov	r16, r22
 56a:	17 2f       	mov	r17, r23
 56c:	41 50       	subi	r20, 0x01	; 1
 56e:	e4 2e       	mov	r14, r20
 570:	f1 2c       	mov	r15, r1
 572:	2f ef       	ldi	r18, 0xFF	; 255
 574:	e2 1a       	sub	r14, r18
 576:	f2 0a       	sbc	r15, r18
 578:	e8 0e       	add	r14, r24
 57a:	f9 1e       	adc	r15, r25
 57c:	89 91       	ld	r24, Y+
 57e:	b5 df       	rcall	.-150    	; 0x4ea <spi_transfer>
 580:	f8 01       	movw	r30, r16
 582:	81 93       	st	Z+, r24
 584:	8f 01       	movw	r16, r30
 586:	ce 15       	cp	r28, r14
 588:	df 05       	cpc	r29, r15
 58a:	c1 f7       	brne	.-16     	; 0x57c <nrf24_transferSync+0x26>
 58c:	df 91       	pop	r29
 58e:	cf 91       	pop	r28
 590:	1f 91       	pop	r17
 592:	0f 91       	pop	r16
 594:	ff 90       	pop	r15
 596:	ef 90       	pop	r14
 598:	08 95       	ret

0000059a <nrf24_transmitSync>:
 59a:	0f 93       	push	r16
 59c:	1f 93       	push	r17
 59e:	cf 93       	push	r28
 5a0:	df 93       	push	r29
 5a2:	66 23       	and	r22, r22
 5a4:	69 f0       	breq	.+26     	; 0x5c0 <nrf24_transmitSync+0x26>
 5a6:	ec 01       	movw	r28, r24
 5a8:	61 50       	subi	r22, 0x01	; 1
 5aa:	06 2f       	mov	r16, r22
 5ac:	10 e0       	ldi	r17, 0x00	; 0
 5ae:	0f 5f       	subi	r16, 0xFF	; 255
 5b0:	1f 4f       	sbci	r17, 0xFF	; 255
 5b2:	08 0f       	add	r16, r24
 5b4:	19 1f       	adc	r17, r25
 5b6:	89 91       	ld	r24, Y+
 5b8:	98 df       	rcall	.-208    	; 0x4ea <spi_transfer>
 5ba:	c0 17       	cp	r28, r16
 5bc:	d1 07       	cpc	r29, r17
 5be:	d9 f7       	brne	.-10     	; 0x5b6 <nrf24_transmitSync+0x1c>
 5c0:	df 91       	pop	r29
 5c2:	cf 91       	pop	r28
 5c4:	1f 91       	pop	r17
 5c6:	0f 91       	pop	r16
 5c8:	08 95       	ret

000005ca <nrf24_configRegister>:
 5ca:	cf 93       	push	r28
 5cc:	df 93       	push	r29
 5ce:	c8 2f       	mov	r28, r24
 5d0:	d6 2f       	mov	r29, r22
 5d2:	80 e0       	ldi	r24, 0x00	; 0
 5d4:	cf d0       	rcall	.+414    	; 0x774 <nrf24_csn_digitalWrite>
 5d6:	8c 2f       	mov	r24, r28
 5d8:	8f 71       	andi	r24, 0x1F	; 31
 5da:	80 62       	ori	r24, 0x20	; 32
 5dc:	86 df       	rcall	.-244    	; 0x4ea <spi_transfer>
 5de:	8d 2f       	mov	r24, r29
 5e0:	84 df       	rcall	.-248    	; 0x4ea <spi_transfer>
 5e2:	81 e0       	ldi	r24, 0x01	; 1
 5e4:	c7 d0       	rcall	.+398    	; 0x774 <nrf24_csn_digitalWrite>
 5e6:	df 91       	pop	r29
 5e8:	cf 91       	pop	r28
 5ea:	08 95       	ret

000005ec <nrf24_getData>:
 5ec:	cf 93       	push	r28
 5ee:	df 93       	push	r29
 5f0:	ec 01       	movw	r28, r24
 5f2:	80 e0       	ldi	r24, 0x00	; 0
 5f4:	bf d0       	rcall	.+382    	; 0x774 <nrf24_csn_digitalWrite>
 5f6:	81 e6       	ldi	r24, 0x61	; 97
 5f8:	78 df       	rcall	.-272    	; 0x4ea <spi_transfer>
 5fa:	40 91 71 00 	lds	r20, 0x0071	; 0x800071 <payload_len>
 5fe:	be 01       	movw	r22, r28
 600:	ce 01       	movw	r24, r28
 602:	a9 df       	rcall	.-174    	; 0x556 <nrf24_transferSync>
 604:	81 e0       	ldi	r24, 0x01	; 1
 606:	b6 d0       	rcall	.+364    	; 0x774 <nrf24_csn_digitalWrite>
 608:	60 e4       	ldi	r22, 0x40	; 64
 60a:	87 e0       	ldi	r24, 0x07	; 7
 60c:	de df       	rcall	.-68     	; 0x5ca <nrf24_configRegister>
 60e:	df 91       	pop	r29
 610:	cf 91       	pop	r28
 612:	08 95       	ret

00000614 <nrf24_powerUpRx>:
 614:	80 e0       	ldi	r24, 0x00	; 0
 616:	ae d0       	rcall	.+348    	; 0x774 <nrf24_csn_digitalWrite>
 618:	82 ee       	ldi	r24, 0xE2	; 226
 61a:	67 df       	rcall	.-306    	; 0x4ea <spi_transfer>
 61c:	81 e0       	ldi	r24, 0x01	; 1
 61e:	aa d0       	rcall	.+340    	; 0x774 <nrf24_csn_digitalWrite>
 620:	60 e7       	ldi	r22, 0x70	; 112
 622:	87 e0       	ldi	r24, 0x07	; 7
 624:	d2 df       	rcall	.-92     	; 0x5ca <nrf24_configRegister>
 626:	80 e0       	ldi	r24, 0x00	; 0
 628:	9f d0       	rcall	.+318    	; 0x768 <nrf24_ce_digitalWrite>
 62a:	6b e0       	ldi	r22, 0x0B	; 11
 62c:	80 e0       	ldi	r24, 0x00	; 0
 62e:	cd df       	rcall	.-102    	; 0x5ca <nrf24_configRegister>
 630:	81 e0       	ldi	r24, 0x01	; 1
 632:	9a d0       	rcall	.+308    	; 0x768 <nrf24_ce_digitalWrite>
 634:	08 95       	ret

00000636 <nrf24_config>:
 636:	60 93 71 00 	sts	0x0071, r22	; 0x800071 <payload_len>
 63a:	68 2f       	mov	r22, r24
 63c:	85 e0       	ldi	r24, 0x05	; 5
 63e:	c5 df       	rcall	.-118    	; 0x5ca <nrf24_configRegister>
 640:	60 e0       	ldi	r22, 0x00	; 0
 642:	81 e1       	ldi	r24, 0x11	; 17
 644:	c2 df       	rcall	.-124    	; 0x5ca <nrf24_configRegister>
 646:	60 91 71 00 	lds	r22, 0x0071	; 0x800071 <payload_len>
 64a:	82 e1       	ldi	r24, 0x12	; 18
 64c:	be df       	rcall	.-132    	; 0x5ca <nrf24_configRegister>
 64e:	60 e0       	ldi	r22, 0x00	; 0
 650:	83 e1       	ldi	r24, 0x13	; 19
 652:	bb df       	rcall	.-138    	; 0x5ca <nrf24_configRegister>
 654:	60 e0       	ldi	r22, 0x00	; 0
 656:	84 e1       	ldi	r24, 0x14	; 20
 658:	b8 df       	rcall	.-144    	; 0x5ca <nrf24_configRegister>
 65a:	60 e0       	ldi	r22, 0x00	; 0
 65c:	85 e1       	ldi	r24, 0x15	; 21
 65e:	b5 df       	rcall	.-150    	; 0x5ca <nrf24_configRegister>
 660:	60 e0       	ldi	r22, 0x00	; 0
 662:	86 e1       	ldi	r24, 0x16	; 22
 664:	b2 df       	rcall	.-156    	; 0x5ca <nrf24_configRegister>
 666:	66 e0       	ldi	r22, 0x06	; 6
 668:	86 e0       	ldi	r24, 0x06	; 6
 66a:	af df       	rcall	.-162    	; 0x5ca <nrf24_configRegister>
 66c:	68 e0       	ldi	r22, 0x08	; 8
 66e:	80 e0       	ldi	r24, 0x00	; 0
 670:	ac df       	rcall	.-168    	; 0x5ca <nrf24_configRegister>
 672:	63 e0       	ldi	r22, 0x03	; 3
 674:	81 e0       	ldi	r24, 0x01	; 1
 676:	a9 df       	rcall	.-174    	; 0x5ca <nrf24_configRegister>
 678:	63 e0       	ldi	r22, 0x03	; 3
 67a:	82 e0       	ldi	r24, 0x02	; 2
 67c:	a6 df       	rcall	.-180    	; 0x5ca <nrf24_configRegister>
 67e:	6f e4       	ldi	r22, 0x4F	; 79
 680:	84 e0       	ldi	r24, 0x04	; 4
 682:	a3 df       	rcall	.-186    	; 0x5ca <nrf24_configRegister>
 684:	60 e0       	ldi	r22, 0x00	; 0
 686:	8c e1       	ldi	r24, 0x1C	; 28
 688:	a0 df       	rcall	.-192    	; 0x5ca <nrf24_configRegister>
 68a:	c4 df       	rcall	.-120    	; 0x614 <nrf24_powerUpRx>
 68c:	08 95       	ret

0000068e <nrf24_readRegister>:
 68e:	0f 93       	push	r16
 690:	1f 93       	push	r17
 692:	cf 93       	push	r28
 694:	df 93       	push	r29
 696:	08 2f       	mov	r16, r24
 698:	eb 01       	movw	r28, r22
 69a:	14 2f       	mov	r17, r20
 69c:	80 e0       	ldi	r24, 0x00	; 0
 69e:	6a d0       	rcall	.+212    	; 0x774 <nrf24_csn_digitalWrite>
 6a0:	80 2f       	mov	r24, r16
 6a2:	8f 71       	andi	r24, 0x1F	; 31
 6a4:	22 df       	rcall	.-444    	; 0x4ea <spi_transfer>
 6a6:	41 2f       	mov	r20, r17
 6a8:	be 01       	movw	r22, r28
 6aa:	ce 01       	movw	r24, r28
 6ac:	54 df       	rcall	.-344    	; 0x556 <nrf24_transferSync>
 6ae:	81 e0       	ldi	r24, 0x01	; 1
 6b0:	61 d0       	rcall	.+194    	; 0x774 <nrf24_csn_digitalWrite>
 6b2:	df 91       	pop	r29
 6b4:	cf 91       	pop	r28
 6b6:	1f 91       	pop	r17
 6b8:	0f 91       	pop	r16
 6ba:	08 95       	ret

000006bc <nrf24_rxFifoEmpty>:
 6bc:	cf 93       	push	r28
 6be:	df 93       	push	r29
 6c0:	1f 92       	push	r1
 6c2:	cd b7       	in	r28, 0x3d	; 61
 6c4:	de b7       	in	r29, 0x3e	; 62
 6c6:	41 e0       	ldi	r20, 0x01	; 1
 6c8:	be 01       	movw	r22, r28
 6ca:	6f 5f       	subi	r22, 0xFF	; 255
 6cc:	7f 4f       	sbci	r23, 0xFF	; 255
 6ce:	87 e1       	ldi	r24, 0x17	; 23
 6d0:	de df       	rcall	.-68     	; 0x68e <nrf24_readRegister>
 6d2:	89 81       	ldd	r24, Y+1	; 0x01
 6d4:	81 70       	andi	r24, 0x01	; 1
 6d6:	0f 90       	pop	r0
 6d8:	df 91       	pop	r29
 6da:	cf 91       	pop	r28
 6dc:	08 95       	ret

000006de <nrf24_dataReady>:
 6de:	30 df       	rcall	.-416    	; 0x540 <nrf24_getStatus>
 6e0:	86 fd       	sbrc	r24, 6
 6e2:	06 c0       	rjmp	.+12     	; 0x6f0 <nrf24_dataReady+0x12>
 6e4:	eb df       	rcall	.-42     	; 0x6bc <nrf24_rxFifoEmpty>
 6e6:	91 e0       	ldi	r25, 0x01	; 1
 6e8:	88 23       	and	r24, r24
 6ea:	19 f0       	breq	.+6      	; 0x6f2 <nrf24_dataReady+0x14>
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	01 c0       	rjmp	.+2      	; 0x6f2 <nrf24_dataReady+0x14>
 6f0:	91 e0       	ldi	r25, 0x01	; 1
 6f2:	89 2f       	mov	r24, r25
 6f4:	08 95       	ret

000006f6 <nrf24_writeRegister>:
    nrf24_csn_digitalWrite(HIGH);
}

/* Write to a single register of nrf24 */
void nrf24_writeRegister(uint8_t reg, uint8_t* value, uint8_t len) 
{
 6f6:	0f 93       	push	r16
 6f8:	1f 93       	push	r17
 6fa:	cf 93       	push	r28
 6fc:	df 93       	push	r29
 6fe:	c8 2f       	mov	r28, r24
 700:	8b 01       	movw	r16, r22
 702:	d4 2f       	mov	r29, r20
    nrf24_csn_digitalWrite(LOW);
 704:	80 e0       	ldi	r24, 0x00	; 0
 706:	36 d0       	rcall	.+108    	; 0x774 <nrf24_csn_digitalWrite>
    spi_transfer(W_REGISTER | (REGISTER_MASK & reg));
 708:	8c 2f       	mov	r24, r28
 70a:	8f 71       	andi	r24, 0x1F	; 31
 70c:	80 62       	ori	r24, 0x20	; 32
 70e:	ed de       	rcall	.-550    	; 0x4ea <spi_transfer>
    nrf24_transmitSync(value,len);
 710:	6d 2f       	mov	r22, r29
 712:	c8 01       	movw	r24, r16
 714:	42 df       	rcall	.-380    	; 0x59a <nrf24_transmitSync>
    nrf24_csn_digitalWrite(HIGH);
 716:	81 e0       	ldi	r24, 0x01	; 1
 718:	2d d0       	rcall	.+90     	; 0x774 <nrf24_csn_digitalWrite>
}
 71a:	df 91       	pop	r29
 71c:	cf 91       	pop	r28
 71e:	1f 91       	pop	r17
 720:	0f 91       	pop	r16
 722:	08 95       	ret

00000724 <nrf24_rx_address>:
    nrf24_powerUpRx();
}

/* Set the RX address */
void nrf24_rx_address(uint8_t * adr) 
{
 724:	cf 93       	push	r28
 726:	df 93       	push	r29
 728:	ec 01       	movw	r28, r24
    nrf24_ce_digitalWrite(LOW);
 72a:	80 e0       	ldi	r24, 0x00	; 0
 72c:	1d d0       	rcall	.+58     	; 0x768 <nrf24_ce_digitalWrite>
    nrf24_writeRegister(RX_ADDR_P1,adr,nrf24_ADDR_LEN);
 72e:	45 e0       	ldi	r20, 0x05	; 5
 730:	be 01       	movw	r22, r28
 732:	8b e0       	ldi	r24, 0x0B	; 11
 734:	e0 df       	rcall	.-64     	; 0x6f6 <nrf24_writeRegister>
    nrf24_ce_digitalWrite(HIGH);
 736:	81 e0       	ldi	r24, 0x01	; 1
 738:	17 d0       	rcall	.+46     	; 0x768 <nrf24_ce_digitalWrite>
}
 73a:	df 91       	pop	r29
 73c:	cf 91       	pop	r28
 73e:	08 95       	ret

00000740 <nrf24_tx_address>:
    return payload_len;
}

/* Set the TX address */
void nrf24_tx_address(uint8_t* adr)
{
 740:	cf 93       	push	r28
 742:	df 93       	push	r29
 744:	ec 01       	movw	r28, r24
    /* RX_ADDR_P0 must be set to the sending addr for auto ack to work. */
    nrf24_writeRegister(RX_ADDR_P0,adr,nrf24_ADDR_LEN);
 746:	45 e0       	ldi	r20, 0x05	; 5
 748:	bc 01       	movw	r22, r24
 74a:	8a e0       	ldi	r24, 0x0A	; 10
 74c:	d4 df       	rcall	.-88     	; 0x6f6 <nrf24_writeRegister>
    nrf24_writeRegister(TX_ADDR,adr,nrf24_ADDR_LEN);
 74e:	45 e0       	ldi	r20, 0x05	; 5
 750:	be 01       	movw	r22, r28
 752:	80 e1       	ldi	r24, 0x10	; 16
 754:	d0 df       	rcall	.-96     	; 0x6f6 <nrf24_writeRegister>
}
 756:	df 91       	pop	r29
 758:	cf 91       	pop	r28
 75a:	08 95       	ret

0000075c <nrf24_setupPins>:

/* ------------------------------------------------------------------------- */

void nrf24_setupPins()
{
    set_bit(RF_DDR,CE); // CE output
 75c:	8f 9a       	sbi	0x11, 7	; 17
    set_bit(RF_DDR,CSN); // CSN output
 75e:	8a 9a       	sbi	0x11, 2	; 17
    set_bit(RF_DDR,SCK); // SCK output
 760:	8e 9a       	sbi	0x11, 6	; 17
    set_bit(RF_DDR,MOSI); // MOSI output
 762:	8b 9a       	sbi	0x11, 3	; 17
    clr_bit(RF_DDR,MISO); // MISO input
 764:	8d 98       	cbi	0x11, 5	; 17
 766:	08 95       	ret

00000768 <nrf24_ce_digitalWrite>:
}
/* ------------------------------------------------------------------------- */
void nrf24_ce_digitalWrite(uint8_t state)
{
    if(state)
 768:	88 23       	and	r24, r24
 76a:	11 f0       	breq	.+4      	; 0x770 <nrf24_ce_digitalWrite+0x8>
    {
        set_bit(RF_PORT,CE);
 76c:	97 9a       	sbi	0x12, 7	; 18
 76e:	08 95       	ret
    }
    else
    {
        clr_bit(RF_PORT,CE);
 770:	97 98       	cbi	0x12, 7	; 18
 772:	08 95       	ret

00000774 <nrf24_csn_digitalWrite>:
    }
}
/* ------------------------------------------------------------------------- */
void nrf24_csn_digitalWrite(uint8_t state)
{
    if(state)
 774:	88 23       	and	r24, r24
 776:	11 f0       	breq	.+4      	; 0x77c <nrf24_csn_digitalWrite+0x8>
    {
        set_bit(RF_PORT,CSN);
 778:	92 9a       	sbi	0x12, 2	; 18
 77a:	08 95       	ret
    }
    else
    {
        clr_bit(RF_PORT,CSN);
 77c:	92 98       	cbi	0x12, 2	; 18
 77e:	08 95       	ret

00000780 <nrf24_sck_digitalWrite>:
    }
}
/* ------------------------------------------------------------------------- */
void nrf24_sck_digitalWrite(uint8_t state)
{
    if(state)
 780:	88 23       	and	r24, r24
 782:	11 f0       	breq	.+4      	; 0x788 <nrf24_sck_digitalWrite+0x8>
    {
        set_bit(RF_PORT,SCK);
 784:	96 9a       	sbi	0x12, 6	; 18
 786:	08 95       	ret
    }
    else
    {
        clr_bit(RF_PORT,SCK);
 788:	96 98       	cbi	0x12, 6	; 18
 78a:	08 95       	ret

0000078c <nrf24_mosi_digitalWrite>:
    }
}
/* ------------------------------------------------------------------------- */
void nrf24_mosi_digitalWrite(uint8_t state)
{
    if(state)
 78c:	88 23       	and	r24, r24
 78e:	11 f0       	breq	.+4      	; 0x794 <nrf24_mosi_digitalWrite+0x8>
    {
        set_bit(RF_PORT,MOSI);
 790:	93 9a       	sbi	0x12, 3	; 18
 792:	08 95       	ret
    }
    else
    {
        clr_bit(RF_PORT,MOSI);
 794:	93 98       	cbi	0x12, 3	; 18
 796:	08 95       	ret

00000798 <nrf24_miso_digitalRead>:
    }
}
/* ------------------------------------------------------------------------- */
uint8_t nrf24_miso_digitalRead()
{
    return check_bit(RF_PIN,MISO);
 798:	80 b3       	in	r24, 0x10	; 16
}
 79a:	80 72       	andi	r24, 0x20	; 32
 79c:	08 95       	ret

0000079e <USART_Init>:

char USART_RxChar()									/* Data receiving function */
{
	while (!(UCSRA & (1 << RXC)));					/* Wait until new data receive */
	return(UDR);									/* Get and return received data */ 
}
 79e:	83 e3       	ldi	r24, 0x33	; 51
 7a0:	89 b9       	out	0x09, r24	; 9
 7a2:	8a b1       	in	r24, 0x0a	; 10
 7a4:	88 61       	ori	r24, 0x18	; 24
 7a6:	8a b9       	out	0x0a, r24	; 10
 7a8:	80 b5       	in	r24, 0x20	; 32
 7aa:	86 68       	ori	r24, 0x86	; 134
 7ac:	80 bd       	out	0x20, r24	; 32
 7ae:	08 95       	ret

000007b0 <USART_TxChar>:

void USART_TxChar(char data)						/* Data transmitting function */
{
	UDR = data;										/* Write data to be transmitting in UDR */
 7b0:	8c b9       	out	0x0c, r24	; 12
	while (!(UCSRA & (1<<UDRE)));					/* Wait until data transmit and buffer get empty */
 7b2:	5d 9b       	sbis	0x0b, 5	; 11
 7b4:	fe cf       	rjmp	.-4      	; 0x7b2 <USART_TxChar+0x2>
}
 7b6:	08 95       	ret

000007b8 <__cmpsf2>:
 7b8:	d9 d0       	rcall	.+434    	; 0x96c <__fp_cmp>
 7ba:	08 f4       	brcc	.+2      	; 0x7be <__cmpsf2+0x6>
 7bc:	81 e0       	ldi	r24, 0x01	; 1
 7be:	08 95       	ret

000007c0 <__divsf3>:
 7c0:	0c d0       	rcall	.+24     	; 0x7da <__divsf3x>
 7c2:	0f c1       	rjmp	.+542    	; 0x9e2 <__fp_round>
 7c4:	07 d1       	rcall	.+526    	; 0x9d4 <__fp_pscB>
 7c6:	40 f0       	brcs	.+16     	; 0x7d8 <__divsf3+0x18>
 7c8:	fe d0       	rcall	.+508    	; 0x9c6 <__fp_pscA>
 7ca:	30 f0       	brcs	.+12     	; 0x7d8 <__divsf3+0x18>
 7cc:	21 f4       	brne	.+8      	; 0x7d6 <__divsf3+0x16>
 7ce:	5f 3f       	cpi	r21, 0xFF	; 255
 7d0:	19 f0       	breq	.+6      	; 0x7d8 <__divsf3+0x18>
 7d2:	f0 c0       	rjmp	.+480    	; 0x9b4 <__fp_inf>
 7d4:	51 11       	cpse	r21, r1
 7d6:	39 c1       	rjmp	.+626    	; 0xa4a <__fp_szero>
 7d8:	f3 c0       	rjmp	.+486    	; 0x9c0 <__fp_nan>

000007da <__divsf3x>:
 7da:	14 d1       	rcall	.+552    	; 0xa04 <__fp_split3>
 7dc:	98 f3       	brcs	.-26     	; 0x7c4 <__divsf3+0x4>

000007de <__divsf3_pse>:
 7de:	99 23       	and	r25, r25
 7e0:	c9 f3       	breq	.-14     	; 0x7d4 <__divsf3+0x14>
 7e2:	55 23       	and	r21, r21
 7e4:	b1 f3       	breq	.-20     	; 0x7d2 <__divsf3+0x12>
 7e6:	95 1b       	sub	r25, r21
 7e8:	55 0b       	sbc	r21, r21
 7ea:	bb 27       	eor	r27, r27
 7ec:	aa 27       	eor	r26, r26
 7ee:	62 17       	cp	r22, r18
 7f0:	73 07       	cpc	r23, r19
 7f2:	84 07       	cpc	r24, r20
 7f4:	38 f0       	brcs	.+14     	; 0x804 <__divsf3_pse+0x26>
 7f6:	9f 5f       	subi	r25, 0xFF	; 255
 7f8:	5f 4f       	sbci	r21, 0xFF	; 255
 7fa:	22 0f       	add	r18, r18
 7fc:	33 1f       	adc	r19, r19
 7fe:	44 1f       	adc	r20, r20
 800:	aa 1f       	adc	r26, r26
 802:	a9 f3       	breq	.-22     	; 0x7ee <__divsf3_pse+0x10>
 804:	33 d0       	rcall	.+102    	; 0x86c <__divsf3_pse+0x8e>
 806:	0e 2e       	mov	r0, r30
 808:	3a f0       	brmi	.+14     	; 0x818 <__divsf3_pse+0x3a>
 80a:	e0 e8       	ldi	r30, 0x80	; 128
 80c:	30 d0       	rcall	.+96     	; 0x86e <__divsf3_pse+0x90>
 80e:	91 50       	subi	r25, 0x01	; 1
 810:	50 40       	sbci	r21, 0x00	; 0
 812:	e6 95       	lsr	r30
 814:	00 1c       	adc	r0, r0
 816:	ca f7       	brpl	.-14     	; 0x80a <__divsf3_pse+0x2c>
 818:	29 d0       	rcall	.+82     	; 0x86c <__divsf3_pse+0x8e>
 81a:	fe 2f       	mov	r31, r30
 81c:	27 d0       	rcall	.+78     	; 0x86c <__divsf3_pse+0x8e>
 81e:	66 0f       	add	r22, r22
 820:	77 1f       	adc	r23, r23
 822:	88 1f       	adc	r24, r24
 824:	bb 1f       	adc	r27, r27
 826:	26 17       	cp	r18, r22
 828:	37 07       	cpc	r19, r23
 82a:	48 07       	cpc	r20, r24
 82c:	ab 07       	cpc	r26, r27
 82e:	b0 e8       	ldi	r27, 0x80	; 128
 830:	09 f0       	breq	.+2      	; 0x834 <__divsf3_pse+0x56>
 832:	bb 0b       	sbc	r27, r27
 834:	80 2d       	mov	r24, r0
 836:	bf 01       	movw	r22, r30
 838:	ff 27       	eor	r31, r31
 83a:	93 58       	subi	r25, 0x83	; 131
 83c:	5f 4f       	sbci	r21, 0xFF	; 255
 83e:	2a f0       	brmi	.+10     	; 0x84a <__divsf3_pse+0x6c>
 840:	9e 3f       	cpi	r25, 0xFE	; 254
 842:	51 05       	cpc	r21, r1
 844:	68 f0       	brcs	.+26     	; 0x860 <__divsf3_pse+0x82>
 846:	b6 c0       	rjmp	.+364    	; 0x9b4 <__fp_inf>
 848:	00 c1       	rjmp	.+512    	; 0xa4a <__fp_szero>
 84a:	5f 3f       	cpi	r21, 0xFF	; 255
 84c:	ec f3       	brlt	.-6      	; 0x848 <__divsf3_pse+0x6a>
 84e:	98 3e       	cpi	r25, 0xE8	; 232
 850:	dc f3       	brlt	.-10     	; 0x848 <__divsf3_pse+0x6a>
 852:	86 95       	lsr	r24
 854:	77 95       	ror	r23
 856:	67 95       	ror	r22
 858:	b7 95       	ror	r27
 85a:	f7 95       	ror	r31
 85c:	9f 5f       	subi	r25, 0xFF	; 255
 85e:	c9 f7       	brne	.-14     	; 0x852 <__divsf3_pse+0x74>
 860:	88 0f       	add	r24, r24
 862:	91 1d       	adc	r25, r1
 864:	96 95       	lsr	r25
 866:	87 95       	ror	r24
 868:	97 f9       	bld	r25, 7
 86a:	08 95       	ret
 86c:	e1 e0       	ldi	r30, 0x01	; 1
 86e:	66 0f       	add	r22, r22
 870:	77 1f       	adc	r23, r23
 872:	88 1f       	adc	r24, r24
 874:	bb 1f       	adc	r27, r27
 876:	62 17       	cp	r22, r18
 878:	73 07       	cpc	r23, r19
 87a:	84 07       	cpc	r24, r20
 87c:	ba 07       	cpc	r27, r26
 87e:	20 f0       	brcs	.+8      	; 0x888 <__divsf3_pse+0xaa>
 880:	62 1b       	sub	r22, r18
 882:	73 0b       	sbc	r23, r19
 884:	84 0b       	sbc	r24, r20
 886:	ba 0b       	sbc	r27, r26
 888:	ee 1f       	adc	r30, r30
 88a:	88 f7       	brcc	.-30     	; 0x86e <__divsf3_pse+0x90>
 88c:	e0 95       	com	r30
 88e:	08 95       	ret

00000890 <__fixsfsi>:
 890:	04 d0       	rcall	.+8      	; 0x89a <__fixunssfsi>
 892:	68 94       	set
 894:	b1 11       	cpse	r27, r1
 896:	d9 c0       	rjmp	.+434    	; 0xa4a <__fp_szero>
 898:	08 95       	ret

0000089a <__fixunssfsi>:
 89a:	bc d0       	rcall	.+376    	; 0xa14 <__fp_splitA>
 89c:	88 f0       	brcs	.+34     	; 0x8c0 <__fixunssfsi+0x26>
 89e:	9f 57       	subi	r25, 0x7F	; 127
 8a0:	90 f0       	brcs	.+36     	; 0x8c6 <__fixunssfsi+0x2c>
 8a2:	b9 2f       	mov	r27, r25
 8a4:	99 27       	eor	r25, r25
 8a6:	b7 51       	subi	r27, 0x17	; 23
 8a8:	a0 f0       	brcs	.+40     	; 0x8d2 <__fixunssfsi+0x38>
 8aa:	d1 f0       	breq	.+52     	; 0x8e0 <__fixunssfsi+0x46>
 8ac:	66 0f       	add	r22, r22
 8ae:	77 1f       	adc	r23, r23
 8b0:	88 1f       	adc	r24, r24
 8b2:	99 1f       	adc	r25, r25
 8b4:	1a f0       	brmi	.+6      	; 0x8bc <__fixunssfsi+0x22>
 8b6:	ba 95       	dec	r27
 8b8:	c9 f7       	brne	.-14     	; 0x8ac <__fixunssfsi+0x12>
 8ba:	12 c0       	rjmp	.+36     	; 0x8e0 <__fixunssfsi+0x46>
 8bc:	b1 30       	cpi	r27, 0x01	; 1
 8be:	81 f0       	breq	.+32     	; 0x8e0 <__fixunssfsi+0x46>
 8c0:	c3 d0       	rcall	.+390    	; 0xa48 <__fp_zero>
 8c2:	b1 e0       	ldi	r27, 0x01	; 1
 8c4:	08 95       	ret
 8c6:	c0 c0       	rjmp	.+384    	; 0xa48 <__fp_zero>
 8c8:	67 2f       	mov	r22, r23
 8ca:	78 2f       	mov	r23, r24
 8cc:	88 27       	eor	r24, r24
 8ce:	b8 5f       	subi	r27, 0xF8	; 248
 8d0:	39 f0       	breq	.+14     	; 0x8e0 <__fixunssfsi+0x46>
 8d2:	b9 3f       	cpi	r27, 0xF9	; 249
 8d4:	cc f3       	brlt	.-14     	; 0x8c8 <__fixunssfsi+0x2e>
 8d6:	86 95       	lsr	r24
 8d8:	77 95       	ror	r23
 8da:	67 95       	ror	r22
 8dc:	b3 95       	inc	r27
 8de:	d9 f7       	brne	.-10     	; 0x8d6 <__fixunssfsi+0x3c>
 8e0:	3e f4       	brtc	.+14     	; 0x8f0 <__fixunssfsi+0x56>
 8e2:	90 95       	com	r25
 8e4:	80 95       	com	r24
 8e6:	70 95       	com	r23
 8e8:	61 95       	neg	r22
 8ea:	7f 4f       	sbci	r23, 0xFF	; 255
 8ec:	8f 4f       	sbci	r24, 0xFF	; 255
 8ee:	9f 4f       	sbci	r25, 0xFF	; 255
 8f0:	08 95       	ret

000008f2 <__floatunsisf>:
 8f2:	e8 94       	clt
 8f4:	09 c0       	rjmp	.+18     	; 0x908 <__floatsisf+0x12>

000008f6 <__floatsisf>:
 8f6:	97 fb       	bst	r25, 7
 8f8:	3e f4       	brtc	.+14     	; 0x908 <__floatsisf+0x12>
 8fa:	90 95       	com	r25
 8fc:	80 95       	com	r24
 8fe:	70 95       	com	r23
 900:	61 95       	neg	r22
 902:	7f 4f       	sbci	r23, 0xFF	; 255
 904:	8f 4f       	sbci	r24, 0xFF	; 255
 906:	9f 4f       	sbci	r25, 0xFF	; 255
 908:	99 23       	and	r25, r25
 90a:	a9 f0       	breq	.+42     	; 0x936 <__floatsisf+0x40>
 90c:	f9 2f       	mov	r31, r25
 90e:	96 e9       	ldi	r25, 0x96	; 150
 910:	bb 27       	eor	r27, r27
 912:	93 95       	inc	r25
 914:	f6 95       	lsr	r31
 916:	87 95       	ror	r24
 918:	77 95       	ror	r23
 91a:	67 95       	ror	r22
 91c:	b7 95       	ror	r27
 91e:	f1 11       	cpse	r31, r1
 920:	f8 cf       	rjmp	.-16     	; 0x912 <__floatsisf+0x1c>
 922:	fa f4       	brpl	.+62     	; 0x962 <__floatsisf+0x6c>
 924:	bb 0f       	add	r27, r27
 926:	11 f4       	brne	.+4      	; 0x92c <__floatsisf+0x36>
 928:	60 ff       	sbrs	r22, 0
 92a:	1b c0       	rjmp	.+54     	; 0x962 <__floatsisf+0x6c>
 92c:	6f 5f       	subi	r22, 0xFF	; 255
 92e:	7f 4f       	sbci	r23, 0xFF	; 255
 930:	8f 4f       	sbci	r24, 0xFF	; 255
 932:	9f 4f       	sbci	r25, 0xFF	; 255
 934:	16 c0       	rjmp	.+44     	; 0x962 <__floatsisf+0x6c>
 936:	88 23       	and	r24, r24
 938:	11 f0       	breq	.+4      	; 0x93e <__floatsisf+0x48>
 93a:	96 e9       	ldi	r25, 0x96	; 150
 93c:	11 c0       	rjmp	.+34     	; 0x960 <__floatsisf+0x6a>
 93e:	77 23       	and	r23, r23
 940:	21 f0       	breq	.+8      	; 0x94a <__floatsisf+0x54>
 942:	9e e8       	ldi	r25, 0x8E	; 142
 944:	87 2f       	mov	r24, r23
 946:	76 2f       	mov	r23, r22
 948:	05 c0       	rjmp	.+10     	; 0x954 <__floatsisf+0x5e>
 94a:	66 23       	and	r22, r22
 94c:	71 f0       	breq	.+28     	; 0x96a <__floatsisf+0x74>
 94e:	96 e8       	ldi	r25, 0x86	; 134
 950:	86 2f       	mov	r24, r22
 952:	70 e0       	ldi	r23, 0x00	; 0
 954:	60 e0       	ldi	r22, 0x00	; 0
 956:	2a f0       	brmi	.+10     	; 0x962 <__floatsisf+0x6c>
 958:	9a 95       	dec	r25
 95a:	66 0f       	add	r22, r22
 95c:	77 1f       	adc	r23, r23
 95e:	88 1f       	adc	r24, r24
 960:	da f7       	brpl	.-10     	; 0x958 <__floatsisf+0x62>
 962:	88 0f       	add	r24, r24
 964:	96 95       	lsr	r25
 966:	87 95       	ror	r24
 968:	97 f9       	bld	r25, 7
 96a:	08 95       	ret

0000096c <__fp_cmp>:
 96c:	99 0f       	add	r25, r25
 96e:	00 08       	sbc	r0, r0
 970:	55 0f       	add	r21, r21
 972:	aa 0b       	sbc	r26, r26
 974:	e0 e8       	ldi	r30, 0x80	; 128
 976:	fe ef       	ldi	r31, 0xFE	; 254
 978:	16 16       	cp	r1, r22
 97a:	17 06       	cpc	r1, r23
 97c:	e8 07       	cpc	r30, r24
 97e:	f9 07       	cpc	r31, r25
 980:	c0 f0       	brcs	.+48     	; 0x9b2 <__fp_cmp+0x46>
 982:	12 16       	cp	r1, r18
 984:	13 06       	cpc	r1, r19
 986:	e4 07       	cpc	r30, r20
 988:	f5 07       	cpc	r31, r21
 98a:	98 f0       	brcs	.+38     	; 0x9b2 <__fp_cmp+0x46>
 98c:	62 1b       	sub	r22, r18
 98e:	73 0b       	sbc	r23, r19
 990:	84 0b       	sbc	r24, r20
 992:	95 0b       	sbc	r25, r21
 994:	39 f4       	brne	.+14     	; 0x9a4 <__fp_cmp+0x38>
 996:	0a 26       	eor	r0, r26
 998:	61 f0       	breq	.+24     	; 0x9b2 <__fp_cmp+0x46>
 99a:	23 2b       	or	r18, r19
 99c:	24 2b       	or	r18, r20
 99e:	25 2b       	or	r18, r21
 9a0:	21 f4       	brne	.+8      	; 0x9aa <__fp_cmp+0x3e>
 9a2:	08 95       	ret
 9a4:	0a 26       	eor	r0, r26
 9a6:	09 f4       	brne	.+2      	; 0x9aa <__fp_cmp+0x3e>
 9a8:	a1 40       	sbci	r26, 0x01	; 1
 9aa:	a6 95       	lsr	r26
 9ac:	8f ef       	ldi	r24, 0xFF	; 255
 9ae:	81 1d       	adc	r24, r1
 9b0:	81 1d       	adc	r24, r1
 9b2:	08 95       	ret

000009b4 <__fp_inf>:
 9b4:	97 f9       	bld	r25, 7
 9b6:	9f 67       	ori	r25, 0x7F	; 127
 9b8:	80 e8       	ldi	r24, 0x80	; 128
 9ba:	70 e0       	ldi	r23, 0x00	; 0
 9bc:	60 e0       	ldi	r22, 0x00	; 0
 9be:	08 95       	ret

000009c0 <__fp_nan>:
 9c0:	9f ef       	ldi	r25, 0xFF	; 255
 9c2:	80 ec       	ldi	r24, 0xC0	; 192
 9c4:	08 95       	ret

000009c6 <__fp_pscA>:
 9c6:	00 24       	eor	r0, r0
 9c8:	0a 94       	dec	r0
 9ca:	16 16       	cp	r1, r22
 9cc:	17 06       	cpc	r1, r23
 9ce:	18 06       	cpc	r1, r24
 9d0:	09 06       	cpc	r0, r25
 9d2:	08 95       	ret

000009d4 <__fp_pscB>:
 9d4:	00 24       	eor	r0, r0
 9d6:	0a 94       	dec	r0
 9d8:	12 16       	cp	r1, r18
 9da:	13 06       	cpc	r1, r19
 9dc:	14 06       	cpc	r1, r20
 9de:	05 06       	cpc	r0, r21
 9e0:	08 95       	ret

000009e2 <__fp_round>:
 9e2:	09 2e       	mov	r0, r25
 9e4:	03 94       	inc	r0
 9e6:	00 0c       	add	r0, r0
 9e8:	11 f4       	brne	.+4      	; 0x9ee <__fp_round+0xc>
 9ea:	88 23       	and	r24, r24
 9ec:	52 f0       	brmi	.+20     	; 0xa02 <__fp_round+0x20>
 9ee:	bb 0f       	add	r27, r27
 9f0:	40 f4       	brcc	.+16     	; 0xa02 <__fp_round+0x20>
 9f2:	bf 2b       	or	r27, r31
 9f4:	11 f4       	brne	.+4      	; 0x9fa <__fp_round+0x18>
 9f6:	60 ff       	sbrs	r22, 0
 9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fp_round+0x20>
 9fa:	6f 5f       	subi	r22, 0xFF	; 255
 9fc:	7f 4f       	sbci	r23, 0xFF	; 255
 9fe:	8f 4f       	sbci	r24, 0xFF	; 255
 a00:	9f 4f       	sbci	r25, 0xFF	; 255
 a02:	08 95       	ret

00000a04 <__fp_split3>:
 a04:	57 fd       	sbrc	r21, 7
 a06:	90 58       	subi	r25, 0x80	; 128
 a08:	44 0f       	add	r20, r20
 a0a:	55 1f       	adc	r21, r21
 a0c:	59 f0       	breq	.+22     	; 0xa24 <__fp_splitA+0x10>
 a0e:	5f 3f       	cpi	r21, 0xFF	; 255
 a10:	71 f0       	breq	.+28     	; 0xa2e <__fp_splitA+0x1a>
 a12:	47 95       	ror	r20

00000a14 <__fp_splitA>:
 a14:	88 0f       	add	r24, r24
 a16:	97 fb       	bst	r25, 7
 a18:	99 1f       	adc	r25, r25
 a1a:	61 f0       	breq	.+24     	; 0xa34 <__fp_splitA+0x20>
 a1c:	9f 3f       	cpi	r25, 0xFF	; 255
 a1e:	79 f0       	breq	.+30     	; 0xa3e <__fp_splitA+0x2a>
 a20:	87 95       	ror	r24
 a22:	08 95       	ret
 a24:	12 16       	cp	r1, r18
 a26:	13 06       	cpc	r1, r19
 a28:	14 06       	cpc	r1, r20
 a2a:	55 1f       	adc	r21, r21
 a2c:	f2 cf       	rjmp	.-28     	; 0xa12 <__fp_split3+0xe>
 a2e:	46 95       	lsr	r20
 a30:	f1 df       	rcall	.-30     	; 0xa14 <__fp_splitA>
 a32:	08 c0       	rjmp	.+16     	; 0xa44 <__fp_splitA+0x30>
 a34:	16 16       	cp	r1, r22
 a36:	17 06       	cpc	r1, r23
 a38:	18 06       	cpc	r1, r24
 a3a:	99 1f       	adc	r25, r25
 a3c:	f1 cf       	rjmp	.-30     	; 0xa20 <__fp_splitA+0xc>
 a3e:	86 95       	lsr	r24
 a40:	71 05       	cpc	r23, r1
 a42:	61 05       	cpc	r22, r1
 a44:	08 94       	sec
 a46:	08 95       	ret

00000a48 <__fp_zero>:
 a48:	e8 94       	clt

00000a4a <__fp_szero>:
 a4a:	bb 27       	eor	r27, r27
 a4c:	66 27       	eor	r22, r22
 a4e:	77 27       	eor	r23, r23
 a50:	cb 01       	movw	r24, r22
 a52:	97 f9       	bld	r25, 7
 a54:	08 95       	ret

00000a56 <__mulsf3>:
 a56:	0b d0       	rcall	.+22     	; 0xa6e <__mulsf3x>
 a58:	c4 cf       	rjmp	.-120    	; 0x9e2 <__fp_round>
 a5a:	b5 df       	rcall	.-150    	; 0x9c6 <__fp_pscA>
 a5c:	28 f0       	brcs	.+10     	; 0xa68 <__mulsf3+0x12>
 a5e:	ba df       	rcall	.-140    	; 0x9d4 <__fp_pscB>
 a60:	18 f0       	brcs	.+6      	; 0xa68 <__mulsf3+0x12>
 a62:	95 23       	and	r25, r21
 a64:	09 f0       	breq	.+2      	; 0xa68 <__mulsf3+0x12>
 a66:	a6 cf       	rjmp	.-180    	; 0x9b4 <__fp_inf>
 a68:	ab cf       	rjmp	.-170    	; 0x9c0 <__fp_nan>
 a6a:	11 24       	eor	r1, r1
 a6c:	ee cf       	rjmp	.-36     	; 0xa4a <__fp_szero>

00000a6e <__mulsf3x>:
 a6e:	ca df       	rcall	.-108    	; 0xa04 <__fp_split3>
 a70:	a0 f3       	brcs	.-24     	; 0xa5a <__mulsf3+0x4>

00000a72 <__mulsf3_pse>:
 a72:	95 9f       	mul	r25, r21
 a74:	d1 f3       	breq	.-12     	; 0xa6a <__mulsf3+0x14>
 a76:	95 0f       	add	r25, r21
 a78:	50 e0       	ldi	r21, 0x00	; 0
 a7a:	55 1f       	adc	r21, r21
 a7c:	62 9f       	mul	r22, r18
 a7e:	f0 01       	movw	r30, r0
 a80:	72 9f       	mul	r23, r18
 a82:	bb 27       	eor	r27, r27
 a84:	f0 0d       	add	r31, r0
 a86:	b1 1d       	adc	r27, r1
 a88:	63 9f       	mul	r22, r19
 a8a:	aa 27       	eor	r26, r26
 a8c:	f0 0d       	add	r31, r0
 a8e:	b1 1d       	adc	r27, r1
 a90:	aa 1f       	adc	r26, r26
 a92:	64 9f       	mul	r22, r20
 a94:	66 27       	eor	r22, r22
 a96:	b0 0d       	add	r27, r0
 a98:	a1 1d       	adc	r26, r1
 a9a:	66 1f       	adc	r22, r22
 a9c:	82 9f       	mul	r24, r18
 a9e:	22 27       	eor	r18, r18
 aa0:	b0 0d       	add	r27, r0
 aa2:	a1 1d       	adc	r26, r1
 aa4:	62 1f       	adc	r22, r18
 aa6:	73 9f       	mul	r23, r19
 aa8:	b0 0d       	add	r27, r0
 aaa:	a1 1d       	adc	r26, r1
 aac:	62 1f       	adc	r22, r18
 aae:	83 9f       	mul	r24, r19
 ab0:	a0 0d       	add	r26, r0
 ab2:	61 1d       	adc	r22, r1
 ab4:	22 1f       	adc	r18, r18
 ab6:	74 9f       	mul	r23, r20
 ab8:	33 27       	eor	r19, r19
 aba:	a0 0d       	add	r26, r0
 abc:	61 1d       	adc	r22, r1
 abe:	23 1f       	adc	r18, r19
 ac0:	84 9f       	mul	r24, r20
 ac2:	60 0d       	add	r22, r0
 ac4:	21 1d       	adc	r18, r1
 ac6:	82 2f       	mov	r24, r18
 ac8:	76 2f       	mov	r23, r22
 aca:	6a 2f       	mov	r22, r26
 acc:	11 24       	eor	r1, r1
 ace:	9f 57       	subi	r25, 0x7F	; 127
 ad0:	50 40       	sbci	r21, 0x00	; 0
 ad2:	8a f0       	brmi	.+34     	; 0xaf6 <__mulsf3_pse+0x84>
 ad4:	e1 f0       	breq	.+56     	; 0xb0e <__mulsf3_pse+0x9c>
 ad6:	88 23       	and	r24, r24
 ad8:	4a f0       	brmi	.+18     	; 0xaec <__mulsf3_pse+0x7a>
 ada:	ee 0f       	add	r30, r30
 adc:	ff 1f       	adc	r31, r31
 ade:	bb 1f       	adc	r27, r27
 ae0:	66 1f       	adc	r22, r22
 ae2:	77 1f       	adc	r23, r23
 ae4:	88 1f       	adc	r24, r24
 ae6:	91 50       	subi	r25, 0x01	; 1
 ae8:	50 40       	sbci	r21, 0x00	; 0
 aea:	a9 f7       	brne	.-22     	; 0xad6 <__mulsf3_pse+0x64>
 aec:	9e 3f       	cpi	r25, 0xFE	; 254
 aee:	51 05       	cpc	r21, r1
 af0:	70 f0       	brcs	.+28     	; 0xb0e <__mulsf3_pse+0x9c>
 af2:	60 cf       	rjmp	.-320    	; 0x9b4 <__fp_inf>
 af4:	aa cf       	rjmp	.-172    	; 0xa4a <__fp_szero>
 af6:	5f 3f       	cpi	r21, 0xFF	; 255
 af8:	ec f3       	brlt	.-6      	; 0xaf4 <__mulsf3_pse+0x82>
 afa:	98 3e       	cpi	r25, 0xE8	; 232
 afc:	dc f3       	brlt	.-10     	; 0xaf4 <__mulsf3_pse+0x82>
 afe:	86 95       	lsr	r24
 b00:	77 95       	ror	r23
 b02:	67 95       	ror	r22
 b04:	b7 95       	ror	r27
 b06:	f7 95       	ror	r31
 b08:	e7 95       	ror	r30
 b0a:	9f 5f       	subi	r25, 0xFF	; 255
 b0c:	c1 f7       	brne	.-16     	; 0xafe <__mulsf3_pse+0x8c>
 b0e:	fe 2b       	or	r31, r30
 b10:	88 0f       	add	r24, r24
 b12:	91 1d       	adc	r25, r1
 b14:	96 95       	lsr	r25
 b16:	87 95       	ror	r24
 b18:	97 f9       	bld	r25, 7
 b1a:	08 95       	ret

00000b1c <_exit>:
 b1c:	f8 94       	cli

00000b1e <__stop_program>:
 b1e:	ff cf       	rjmp	.-2      	; 0xb1e <__stop_program>
